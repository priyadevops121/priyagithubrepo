{
	"name": "RowErrorHandlingDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SalesDataCSV",
						"type": "DatasetReference"
					},
					"name": "SalesCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TableSalesBadDataset",
						"type": "DatasetReference"
					},
					"name": "TableSalesBad"
				},
				{
					"dataset": {
						"referenceName": "SqlServerTable1",
						"type": "DatasetReference"
					},
					"name": "FiTableSales",
					"rejectedDataLinkedService": {
						"referenceName": "adf2rgcontaineremp",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "FileNameColforErrorRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SaleDate as string,",
				"          SaleItem as string,",
				"          Country as string,",
				"          Quantity as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SalesCSV",
				"SalesCSV split(isNull(toDate(SaleDate,'dd-mmm-yyyy')),",
				"     disjoint: false) ~> split1@(ErrorRows, GoodRows)",
				"split1@ErrorRows derive(FileName = 'sales2020.csv') ~> FileNameColforErrorRows",
				"FileNameColforErrorRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SaleDate as string,",
				"          SaleItem as string,",
				"          Country as string,",
				"          Quantity as string,",
				"          FileName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          SaleDate,",
				"          SaleItem,",
				"          Country,",
				"          Quantity,",
				"          FileName",
				"     )) ~> TableSalesBad",
				"split1@GoodRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FiTableSales"
			]
		}
	}
}